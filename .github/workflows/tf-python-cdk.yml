name: UNEMY-Stack-on-AWS-Lighsail

on:
  push:
    branches:
    - main
  pull_request:
   # matches pull request for all branches and tag names

jobs:
  Ubuntu-Python-Terraform-CDK:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5
    env:
      DEV: 'yes'
      PROD: 'no'
      DIFF: 'no'
      APPLY: 'no'
      PROJECT_NAME: 'UNEMY-Stack-on-AWS-Lighsail'
      PROJECT_DESCRIPTION: 'Deploy UNEMY Stack on AWS Lighsail'
      #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #AWS_REGION: ${{ secrets.AWS_REGION }}
      #AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v2
    
    - name: Set Up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    
    - name: Install Dependencies
      run: | 
         sudo apt-get -y install python3-pip awscli
         python3 -m pip install boto3 --upgrade awscli
         sudo apt-get install npm
         sudo npm install -g cdktf-cli
         sudo npm install -g cdktf-cli@next
         sudo npm install cdktf@^0.7
         sudo npm install constructs@^10.0.0
         sudo mkdir $DEV
         cd $DEV
         sudo cdktf init --template="python-pip" --local --project-name $PROJECT_NAME --project-description $PROJECT_DESCRIPTION
         sudo npm install -a @cdktf/provider-aws
         sudo echo ' {
            "language": "python",
            "app": "python3 ./main.py",
            "terraformProviders": [
              "aws@~> 3.0"
            ] 
         }'
         #sleep 10
         #sudo cdktf get
         
    - name: Copy Python Script, Bash Script & Input JSON File - Dev
      if: ${{ env.DEV == 'yes' }}
      run: |-
        cat main.py <<EOF
        EOF
        #&&
        #cat startup-script.sh <<EOF
        #EOF
        #&&
        #cat variables-dev.json <<EOF
        #EOF
        
    - name: Copy Python Script, Bash Script & Input JSON File - Prod
      if: ${{ env.PROD == 'yes' }}
      run: |-
        cat main.py <<EOF
        EOF
        #&&
        #cat startup-script.sh <<EOF
        #EOF
        #&&
        #cat variables-prod.json <<EOF
        #EOF
        
    - name: Terraform CDK Plan
      if:  (env.PLAN == 'yes') && ( env.DEV == 'yes' || env.PROD == 'yes' )
      run: sudo cdktf synth
      
    - name: Terraform CDK Difference
      if:  (env.DIFF == 'yes') && ( env.DEV == 'yes' || env.PROD == 'yes' )
      run: sudo cdktf cdktf diff
      
    - name: Terraform CDK Apply - Dev
      if: github.ref == 'refs/heads/master' && github.event_name == 'push' && env.APPLY == 'yes' && env.DEV == 'yes'
      run: sudo cdktf deploy --auto-approve
    
    - name: Terraform CDK Apply - Prod
      if: github.ref == 'refs/heads/master' && github.event_name == 'push' && env.APPLY == 'yes' && env.PROD == 'yes'
      run: sudo cdktf deploy --auto-approve
  
    - name: Terraform CDK Destroy
      if: ${{ env.DESTROY == 'yes' }}
      run: sudo cdktf destroy --auto-approve
