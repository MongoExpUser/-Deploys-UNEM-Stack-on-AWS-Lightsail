name: CI - UNEMY

on:
  push:
    branches:
    - main
  pull_request:
   # matches pull request for all branches and tag names

jobs:
  Ubuntu-Python-Terraform-CDK:
    runs-on: ubuntu-latest
    env:
      DEV: 'no'
      PROD: 'no'
      DIFF: 'no'
      APPLY: 'no'
      PROJECT_NAME: 'UNEMY-AWS-Lighsail'
      PROJECT_DESCRIPTION: 'Deploy UNEMY On AWS Lighsail'
      CDKTF_INIT_DIRECTORY: 'init'
      BASE_DIRECTORY: '/home/runner/work'
      #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #AWS_REGION: ${{ secrets.AWS_REGION }}
      #AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v2
      # note: checkout directory: /home/runner/work/${repo-name}/$${repo-name}
    
    - name: Set Up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    
    - name: Install Dependencies
      run: | 
         sudo apt-get -y install python3-pip awscli
         python3 -m pip install boto3 --upgrade awscli
         sudo apt-get install npm
         sudo npm install -g npm
         sudo npm install -g cdktf-cli@^0.7.0
         sudo npm install -g cdktf@^0.7.0
         sudo npm install -g constructs@^10.0.9
         pwd
         sudo mkdir $CDKTF_INIT_DIRECTORY
         cd $CDKTF_INIT_DIRECTORY
         sudo cdktf init --template="python-pip" --local --project-name $PROJECT_NAME --project-description $PROJECT_DESCRIPTION
         sudo npm install -a @cdktf/provider-aws @types/node@14.17.27
         sudo chmod 777 *.*
         sudo echo ' {
            "language": "python",
            "app": "python3 ./main.py",
            "terraformProviders": ["aws@~> 3.0"] 
         ' > cdktf.json
         #sudo cdktf get

    - name: Copy Files to Init Directory & List - Dev
      if: ${{ env.DEV == 'yes' }}
      run: | 
        sudo scp -r $BASE_DIRECTORY/UNEMY-Stack-on-AWS-Lightsail/UNEMY-Stack-on-AWS-Lightsail/variables-dev.json $BASE_DIRECTORY/UNEMY-Stack-on-AWS-Lightsail/UNEMY-Stack-on-AWS-Lightsail/$CDKTF_INIT_DIRECTORY/variables.json
        sudo scp -r $BASE_DIRECTORY/UNEMY-Stack-on-AWS-Lightsail/UNEMY-Stack-on-AWS-Lightsail/startup-script.sh $BASE_DIRECTORY/UNEMY-Stack-on-AWS-Lightsail/UNEMY-Stack-on-AWS-Lightsail/$CDKTF_INIT_DIRECTORY/startup-script.sh
        sudo scp -r $BASE_DIRECTORY/UNEMY-Stack-on-AWS-Lightsail/UNEMY-Stack-on-AWS-Lightsail/main.py $BASE_DIRECTORY/UNEMY-Stack-on-AWS-Lightsail/UNEMY-Stack-on-AWS-Lightsail/$CDKTF_INIT_DIRECTORY/main.py
        sudo scp -r $BASE_DIRECTORY/UNEMY-Stack-on-AWS-Lightsail/UNEMY-Stack-on-AWS-Lightsail/startup-script.sh $BASE_DIRECTORY/UNEMY-Stack-on-AWS-Lightsail/UNEMY-Stack-on-AWS-Lightsail/$CDKTF_INIT_DIRECTORY/startup-script.sh
        #cd ./$CDKTF_INIT_DIRECTORY
        pwd
        df -m
        free -m
        ls -l

    - name: Copy Files to Init Directory & List - Prod
      if: ${{ env.PROD == 'yes' }}
      run: | 
        sudo scp -r $BASE_DIRECTORY/UNEMY-Stack-on-AWS-Lightsail/UNEMY-Stack-on-AWS-Lightsail/variables-prod.json $BASE_DIRECTORY/UNEMY-Stack-on-AWS-Lightsail/UNEMY-Stack-on-AWS-Lightsail/$CDKTF_INIT_DIRECTORY/variables.json
        sudo scp -r $BASE_DIRECTORY/UNEMY-Stack-on-AWS-Lightsail/UNEMY-Stack-on-AWS-Lightsail/startup-script.sh $BASE_DIRECTORY/UNEMY-Stack-on-AWS-Lightsail/UNEMY-Stack-on-AWS-Lightsail/$CDKTF_INIT_DIRECTORY/startup-script.sh
        sudo scp -r $BASE_DIRECTORY/UNEMY-Stack-on-AWS-Lightsail/UNEMY-Stack-on-AWS-Lightsail/main.py $BASE_DIRECTORY/UNEMY-Stack-on-AWS-Lightsail/UNEMY-Stack-on-AWS-Lightsail/$CDKTF_INIT_DIRECTORY/main.py
        sudo scp -r $BASE_DIRECTORY/UNEMY-Stack-on-AWS-Lightsail/UNEMY-Stack-on-AWS-Lightsail/startup-script.sh $BASE_DIRECTORY/UNEMY-Stack-on-AWS-Lightsail/UNEMY-Stack-on-AWS-Lightsail/$CDKTF_INIT_DIRECTORY/startup-script.sh
        #cd ./$CDKTF_INIT_DIRECTORY
        pwd
        df -m
        free -m
        ls -l

    - name: Python Terraform CDK Plan
      if:  (env.PLAN == 'yes') && ( env.DEV == 'yes' || env.PROD == 'yes' )
      run: sudo cdktf synth
      
    - name: Python Terraform CDK Difference
      if:  (env.DIFF == 'yes') && ( env.DEV == 'yes' || env.PROD == 'yes' )
      run: sudo cdktf cdktf diff
      
    - name: Python Terraform CDK Apply - Dev
      if: github.ref == 'refs/heads/master' && github.event_name == 'push' && env.APPLY == 'yes' && env.DEV == 'yes'
      run: sudo cdktf deploy --auto-approve
    
    - name: Python Terraform CDK Apply - Prod
      if: github.ref == 'refs/heads/master' && github.event_name == 'push' && env.APPLY == 'yes' && env.PROD == 'yes'
      run: sudo cdktf deploy --auto-approve
  
    - name: Python Terraform CDK Destroy
      if: ${{ env.DESTROY == 'yes' }}
      run: sudo cdktf destroy --auto-approve
